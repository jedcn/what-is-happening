#!/usr/bin/env node

const fs = require('fs');

const argv = require('minimist')(process.argv.slice(2));
const user = argv.user;

const initOctokit = require('../lib/client/initOctokit');
const fetchUserEvents = require('../lib/userEvents/fetchUserEvents');

const host = argv.host || 'api.github.com';

let octokit;
const usingGithubEnterprise = host !== 'api.github.com';
if (usingGithubEnterprise) {
  const pathPrefix = argv['path-prefix'] || 'api/v3';
  const accessToken = process.env.ACCESS_TOKEN;
  octokit = initOctokit({ host, pathPrefix, accessToken });
} else {
  octokit = initOctokit({ host });
}

const buildEvent = require('../lib/userEvents/buildEvent');
const buildEvents = (listOfMaps, server) => {
  return listOfMaps.map((map) => {
    return buildEvent(map, server);
  });
};

const processUserEventsData = ({ host, userEventsData }) => {
  const server = host === 'api.github.com' ? 'github.com' : host;
  const events = buildEvents(userEventsData, server);
  return events.map((event) => new HtmlWrapper(event).toJSON());
};

const HtmlWrapper = require('../lib/userEvents/HtmlWrapper');

const renderTemplateWithData = require('../lib/userEvents/renderHelpers').renderTemplateWithData;

fetchUserEvents({ octokit, host, user })
  .then((userEventsData) => {
    const processedEvents = processUserEventsData({ host, userEventsData });
    const title = `${user} Activity`;
    const renderData = {
      userEvents: processedEvents.toJSON(),
      title
    };
    const renderedContent = renderTemplateWithData('userEvents/index', renderData);
    const outputFile = `${user}.html`;
    fs.writeFile(outputFile, renderedContent, (err) => {
      if (err) throw err;
      console.log(`Results written to ${outputFile}`);
    });
  }).catch(err => {
    console.log('ğŸ˜¢ what-is-happening had a problem: ', err);
  });
