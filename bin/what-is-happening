#!/usr/bin/env node

const buildConfigFromArgs = require('../lib/setup/buildConfigFromArgs');

const config = buildConfigFromArgs(process.argv);

const fetchUserEvents = require('../lib/github/core/fetchUserEvents');
const buildEvents = require('../lib/github/core/buildEvents');
const createRenderData = require('../lib/github/core/createRenderData');
const renderContentFromEvents = require('../lib/github/render/renderContentFromEvents');
const writeContentToFile = require('../lib/github/render/writeContentToFile');
const mergeListsOfEventData = require('../lib/github/core/mergeListsOfEventData');

const fetchAllUserEvents = (config) => {
  const octokit = config.getClient();
  const users = config.getUsers();
  const beginning = config.getBeginning();
  return Promise.all(users.map((user) => fetchUserEvents({ octokit, user, beginning })));
};

fetchAllUserEvents(config)
  .then((listOfListsOfEventData) => {
    const userEventsData = mergeListsOfEventData(listOfListsOfEventData).filter(config.getEventsFilter());
    const host = config.getHost();
    const events = buildEvents({ host, userEventsData });
    const users = config.getUsers();
    const renderData = createRenderData({
      begin: config.getBeginning(),
      end: new Date(),
      events,
      host,
      title: config.getTitle(),
      users
    });
    const renderedContent = renderContentFromEvents(renderData);
    const outputFile = config.getOutputFile();
    writeContentToFile(renderedContent, outputFile);
    console.log(`Results written to ${outputFile}`);
  }).catch(err => {
    console.log('ğŸ˜¢ what-is-happening had a problem: ', err);
  });
