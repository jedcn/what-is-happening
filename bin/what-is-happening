#!/usr/bin/env node

const loadRunControlFile = require('../lib/setup/loadRunControlFile');
const runControlValues = loadRunControlFile();
const accessToken = runControlValues['ACCESS_TOKEN'];
const githubEnterpriseUrl = runControlValues['GITHUB_ENTERPRISE_URL'];

const argv = require('minimist')(process.argv.slice(2));
const user = argv.user;
const focusOnRepos = argv['focus-on-repos'] ? argv['focus-on-repos'].split(',') : [];

const initOctokit = require('../lib/github/client/initOctokit');
const fetchUserEvents = require('../lib/github/core/fetchUserEvents');
const buildEvents = require('../lib/github/core/buildEvents');
const createRenderData = require('../lib/github/core/createRenderData');
const renderContentFromEvents = require('../lib/github/render/renderContentFromEvents');
const writeContentToFile = require('../lib/github/render/writeContentToFile');
const mergeListsOfEventData = require('../lib/github/core/mergeListsOfEventData');
const removeEventsNotInRepos = require('../lib/github/core/removeEventsNotInRepos');
const host = githubEnterpriseUrl || 'api.github.com';

const buildOctokit = (host, argv, accessToken) => {
  const usingGithubEnterprise = host !== 'api.github.com';
  if (usingGithubEnterprise) {
    const pathPrefix = argv['path-prefix'] || 'api/v3';
    return initOctokit({ host, pathPrefix, accessToken });
  } else {
    return initOctokit({ host });
  }
};

const { subDays } = require('date-fns');
const beginning = subDays(new Date(), 7);

const fetchAllUserEvents = ({ host, argv, users, beginning }) => {
  const octokit = buildOctokit(host, argv, accessToken);
  const promises = users.map((user) => fetchUserEvents({ octokit, user, beginning }));
  return Promise.all(promises);
};

const users = user.split(',');

fetchAllUserEvents({ host, argv, users, beginning })
  .then((listOfListsOfEventData) => {
    let userEventsData = mergeListsOfEventData(listOfListsOfEventData);
    userEventsData = removeEventsNotInRepos(userEventsData, focusOnRepos);
    const events = buildEvents({ host, userEventsData });
    const begin = beginning;
    const end = new Date();
    const renderData = createRenderData({
      begin,
      end,
      events,
      host,
      users
    });
    const renderedContent = renderContentFromEvents(renderData);
    const outputFile = `${users.join('-')}.html`;
    writeContentToFile(renderedContent, outputFile);
    console.log(`Results written to ${outputFile}`);
  }).catch(err => {
    console.log('ğŸ˜¢ what-is-happening had a problem: ', err);
  });
